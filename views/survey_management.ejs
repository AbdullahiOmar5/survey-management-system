<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Admin Dashboard | Korsat X Parmaga</title>
    <!-- ======= Styles ====== -->
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/survey.css">
    <style>
              /* Modal and overlay styling */
            .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal {
            background: white;
            padding: 30px;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            position: relative;
            animation: slide-down 0.4s ease-out;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.3);
        }

        .modal h3 {
            margin-top: 0;
            font-size: 1.5em;
            font-weight: bold;
        }

        .close-modal {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
            color: #333;
        }

        .modal label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }

        .modal input,
        .modal textarea,
        .modal select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .modal button {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            background-color: #3367d6;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .modal button:hover {
            background-color: #2a56b1;
        }

        /* Success Modal */
        #successModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        #successModal .modal {
            background: white;
            padding: 30px;
            max-width: 400px;
            text-align: center;
            border-radius: 8px;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.3);
        }

        #successModal .modal h3 {
            color: #4CAF50;
        }

        #successOkBtn {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
        }

        #successOkBtn:hover {
            background-color: #45a049;
        }
        #updateSurveyBtn{
            background-color: #2a56b1;
        }
        .delete-btn{
            background-color: #AF1740;
            border: none;
        }
        .edit-btn,.delete-btn{
            width: 50px;
            border: none;

        }
        .hidden{
            display: none;
        }
    </style>
</head>

<body>
    <!-- =============== Navigation ================ -->
    <div class="container">
        <div class="navigation">
            <ul>
                <li class="system-name-li">
                    <a href="/dashboard">
                        <span class="icon">
                            <ion-icon name="person-circle-outline"></ion-icon>
                        </span>
                        <span class="title system-name">Admin Panel</a></span>
                    </a>
                </li>

                <li>
                    <a href="/dashboard">
                        <span class="icon">
                            <ion-icon name="home-outline"></ion-icon>
                        </span>
                        <span class="title">Dashboard</span>
                    </a>
                </li>

                <li>
                    <a href="/survey_management">
                        <span class="icon">
                            <ion-icon name="people-outline"></ion-icon>
                        </span>
                        <span class="title">Survey management</span>
                    </a>
                </li>

                <li>
                    <a href="/response_analysis">
                        <span class="icon">
                            <ion-icon name="chatbubble-outline"></ion-icon>
                        </span>
                        <span class="title">Response Analaysis</span>
                    </a>
                </li>

            

                <li>
                    <a href="/signin">
                        <span class="icon">
                            <ion-icon name="log-out-outline"></ion-icon>
                        </span>
                        <span class="title">Sign Out</span>
                    </a>
                </li>
            </ul>
        </div>

        <!-- ========================= Main ==================== -->
        <div class="main">
            <div class="topbar">
                <div class="toggle">
                    <ion-icon name="menu-outline"></ion-icon>
                </div>


                <div class="user">
                    <img src="/imgs/admin.png" alt="">
                </div>
            </div>

           

            <!-- ================ Order Details List ================= -->
            <div class="details">
                <div class="recentOrders">
                    <div class="cardHeader">
                        <h2>Active Surveys</h2>
                        <button class="new-survey-btn">New Survey</button>
                        <input type="hidden" id="survey_id" name="survey_id" />
                    </div>
              
                     <!-- List of Surveys -->
                    
                    <table id="surveys-table">
                        <thead>
                            <tr>
                                <th>Survey Title</th>
                                <th>Edit Survey</th>
                            </tr>
                        </thead>
                        <tbody><!-- Surveys will be dynamically added here --></tbody>
                    </table>
                    <!----EDIT MODEL-->
                    <!-- Edit question Modal -->
                    <div id="editSurveyOverlay" class="modal-overlay">
                        <div id="editSurveyModal" class="modal">
                            <span class="close-modal" id="closeEditModal">&times;</span>
                            <h3>Edit Survey</h3>
                            <form id="editSurveyForm">
                                <label for="edit-title">Title:</label><input type="text" id="edit-title" name="title" required>
                                <label for="edit-description">Description:</label><textarea id="edit-description" name="description" rows="3" required></textarea>
                                <label for="edit-deadline">Deadline:</label><input type="date" id="edit-deadline" name="deadline" required>
                                <label for="edit-created-date">Created Date:</label><input type="date" id="edit-created-date" name="created_at" readonly>
                                <button type="button" id="updateSurveyBtn">Update Survey</button>
                            </form>
                        </div>
                    </div>
                    <!---SUCCESS MODEL-->

                </div>
       

            </div>
        </div>
    </div>

    <!-- =========== Scripts =========  -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>


    <script>
        


        // Load surveys into the table
        async function loadSurveys() {
            try {
                const response = await fetch('/api/surveys');
                const surveys = await response.json();
                const tbody = document.getElementById("surveys-table").querySelector("tbody");
                tbody.innerHTML = "";
                surveys.forEach(survey => {
                    const row = document.createElement("tr");
                    row.innerHTML = `<td>${survey.title}</td>
                                    <td>
                                        <button class="actions-btn edit-btn" data-id="${survey._id}" data-title="${survey.title}" data-description="${survey.description}" data-deadline="${survey.deadline}" data-created-at="${survey.created_at}">
                                            <ion-icon name="create-outline"></ion-icon> 
                                        </button>
                                        <button class="actions-btn delete-btn" data-id="${survey._id}">
                                            <ion-icon name="trash-outline"></ion-icon> 
                                        </button>
                                    </td>`;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error("Error loading surveys:", error);
            }
        }
        // Call loadSurveys to display surveys on page load
        loadSurveys();



        // SURVUY TABLE 
        document.getElementById("surveys-table").addEventListener("click", function(event) {
            const target = event.target.closest("button");
            if (target) {
                if (target.classList.contains("edit-btn")) {
                    currentSurveyId = target.getAttribute("data-id");
                    document.getElementById("edit-title").value = target.getAttribute("data-title");
                    document.getElementById("edit-description").value = target.getAttribute("data-description");
                    document.getElementById("edit-deadline").value = target.getAttribute("data-deadline").split("T")[0];
                    
                    document.getElementById("editSurveyOverlay").style.display = "flex";
                } else if (target.classList.contains("delete-btn")) {
                    const surveyId = target.getAttribute("data-id");
                    const confirmed = confirm("Are you sure you want to delete this survey?");
                    if (confirmed) {
                        deleteSurvey(surveyId);
                    }
                }
            }
        });

        async function deleteSurvey(id) {
            try {
                const response = await fetch(`/api/survey/${id}`, { method: 'DELETE' });
                if (response.ok) {
                    loadSurveys();
                } else {
                    alert("Failed to delete survey.");
                }
            } catch (error) {
                console.error("Error deleting survey:", error);
                alert("An error occurred while deleting the survey.");
            }
        }


        

        // UPDATE SURVEY 
        document.getElementById("updateSurveyBtn").addEventListener("click", async function() {
            const newTitle = document.getElementById("edit-title").value;
            const newDescription = document.getElementById("edit-description").value;
            const newDeadline = document.getElementById("edit-deadline").value;
            if (newTitle && newDescription && newDeadline && currentSurveyId) {
                try {
                    const response = await fetch(`/api/survey/${currentSurveyId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ title: newTitle, description: newDescription, deadline: newDeadline })
                    });
                    if (response.ok) {
                        document.getElementById("editSurveyOverlay").style.display = "none";
                        loadSurveys();
                    } else {
                        alert("An error occurred while updating the survey.");
                    }
                } catch (error) {
                    console.error("Error updating survey:", error);
                    alert("An error occurred while updating the survey.");
                }
            }
        });


        // Get the button element
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        const newSurvey = document.querySelector('.new-survey-btn');
        newSurvey.addEventListener('click', function() {
            // newSurvey.classList.remove('hidden')
          const mainContainer = document.querySelector('.recentOrders');
          const titleForm = document.createElement('form');
          titleForm.className = 'survey-title';
        //   titleForm.setAttribute('action', "/api/survey/newsurvey");
          titleForm.setAttribute('method', "post");
        
          // Title Form fields for Title, Created Date, End Date, and Description
          titleForm.innerHTML = `
              <label for="input-title" id="label-one">Title :</label>
              <input type="text" name="title" id="input-title" placeholder="Title" required>
              <label for="created-date" class="label">Created Date :</label>
              <input type="date" name="created_date" id="created-date" required>
              <label for="deadline" class="label">End Date :</label>
              <input type="date" name="deadline" id="dead-line" required> <br>
              <label for="description-title" id="label-four">Description :</label>
              <input type="text" name="description" id="description" placeholder="Description" required> <br>
          `;
        
          mainContainer.appendChild(titleForm);
        
          // Add Question button container
          const addQuestionBtnContainer = document.createElement('div');
          addQuestionBtnContainer.className = 'addQuestion';
          addQuestionBtnContainer.innerHTML = `<button type="button" class="addQuestionBtn"> Add Question </button>`;
          titleForm.appendChild(addQuestionBtnContainer);
        
          // Container for all questions
          const questionsContainer = document.createElement('div');
          questionsContainer.className = 'questionsContainer';
          titleForm.appendChild(questionsContainer);
        
          // Event listener for adding new questions
          const addQuestionBtn = addQuestionBtnContainer.querySelector('.addQuestionBtn');
          addQuestionBtn.addEventListener('click', function() {
              const questionDiv = document.createElement('form');
              questionDiv.setAttribute('action', "post")
            //   questionDiv.setAttribute('methos', "post")
              questionDiv.className = 'question';

              questionDiv.innerHTML = `
                  <label class="questionlbl">Question:</label> <br>
                  <input type="text" name="questions[]" placeholder="Add Question" class="questionTbox" required> <br> <br>
                  <label class="responselbl">Response Type:</label> <br> <br>
                  <select name="response_types[]" class="question-type" required>
                    <option value=""></option>
                    <option value="open-ended">Open ended</option>
                    <option value="single-choice">Single Choice</option>
                    <option value="description">Description</option>
                  </select>
              `;
              questionsContainer.appendChild(questionDiv);
              
              
              
              const selectElement = questionDiv.querySelector('.question-type');
              selectElement.addEventListener('change', function() {
              // Clear any existing responseDiv to avoid duplicates when changing the selection
              const existingResponseDiv = questionDiv.querySelector('.responseDiv');
              if (existingResponseDiv) {
                  existingResponseDiv.remove();
              }
          
              if (selectElement.value === "single-choice") {
                  const responseDiv = document.createElement('div');
                  responseDiv.className = 'responseDiv';
                  responseDiv.innerHTML = `

                      <input type="text" name="options[]" placeholder="Option one"> <br>

                      <input type="text" name="options[]" placeholder="Option two"> <br>

                      <input type="text" name="options[]" placeholder="Option three"> <br>
                  `;
                  questionDiv.appendChild(responseDiv);
              }
              else if (selectElement.value === "open-ended") {
                  const responseDiv = document.createElement('div');
                  responseDiv.className = 'responseDiv';
                  responseDiv.innerHTML = `

                      <input type="text" name="options[]" placeholder="Option one"> <br>
                      <input type="text" name="options[]" placeholder="Option two"> <br>
                  `;
                  questionDiv.appendChild(responseDiv);
              }
              else if (selectElement.value === "description") {
                  const responseDiv = document.createElement('div');
                  responseDiv.className = 'responseDiv';
                  responseDiv.innerHTML = `
                      <input type="text" name="description" placeholder="Enter your description here"> <br>
                  `;
                  questionDiv.appendChild(responseDiv);
              }
            });
        
          });
      
          // Save Title Form button
        //   const saveTitleButton = document.createElement('button');
        //   saveTitleButton.type = 'submit';
        //   saveTitleButton.textContent = 'Save surveys';
        //   saveTitleButton.className = 'submitButton';
        //   titleForm.appendChild(saveTitleButton);
      
          // Save Survey Button
            const saveSurveyButton = document.createElement('button');
                saveSurveyButton.type = 'button';
                saveSurveyButton.textContent = 'Save Survey';
                saveSurveyButton.className = 'saveSurveyButton';
                titleForm.appendChild(saveSurveyButton);
      
            // onClick

            saveSurveyButton.addEventListener('click', async function() {
                    const title = document.getElementById('input-title').value;
                    const createdDate = document.getElementById('created-date').value;
                    const deadline = document.getElementById('dead-line').value;
                    const description = document.getElementById('description').value;
            
                    const response = await fetch('/api/survey/newsurvey', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ title, createdDate, deadline, description })
                    });
                
                    const data = await response.json();
                
                
                    alert(`Survey created with ID: ${data._id}`);
                  $('#survey_id').val(data._id);
                    // Store survey ID for associating with questions
                    titleForm.setAttribute('data-survey-id', data.surveyId);
                });
            
            
          // New Save Questions button
            const saveQuestionsButton = document.createElement('button');
            saveQuestionsButton.type = 'button';
            saveQuestionsButton.textContent = 'Save Questions';
            saveQuestionsButton.className = 'saveQuestionsButton';
            titleForm.appendChild(saveQuestionsButton);
            
            const GetOptions = (inputlist) => {
            const filterArray = [...inputlist].filter((tag) => tag.tagName === 'INPUT');
            let optionlist = [];
            
            for (let i = 0; i < filterArray.length; i++) {
                optionlist.push(filterArray[i].value ?? ""); // use an empty string as a fallback if .value is null/undefined
            }

            return optionlist;
        };
            saveQuestionsButton.addEventListener('click', async function() {
            
                // const surveyId = titleForm.getAttribute('data-survey-id');
                // if (!surveyId) {
                //     alert('Please save the survey first!');
                //     return;
                // }
                const surveyId = $('#survey_id').val();
                if(!surveyId){
                    alert('please save the survey first')
                }
                else{
                    const questions = [];
                    questionsContainer.querySelectorAll('.question').forEach(questionDiv => {
                    const questionText = questionDiv.querySelector('.questionTbox').value;
                    const responseType = questionDiv.querySelector('.question-type').value;
                    const questionOption = questionDiv.querySelector('.responseDiv');
                    const optionList = GetOptions(questionOption.children);
                    questions.push({
                        text: questionText,
                        response_type: responseType,
                        option: optionList
                    });
                });
                console.log('questions :>> ', questions);
                let surveyId3 = $('#survey_id').val();
                // check if ther surwvery is already saved if not show and alert 
                const response = await fetch('/api/survey/addsurveyques', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ surveyId:`${surveyId3}`, questions })
                });
                const data = await response.json();
                alert(`Questions saved for Survey ID: ${surveyId3}`);
                }

                
            });
        
        
        
          // Event listener for the Save Questions button
          // saveQuestionsButton.addEventListener('click', function() {
          //     const questionsData = [];
          //     questionsContainer.querySelectorAll('.question').forEach((questionDiv) => {
          //         const questionText = questionDiv.querySelector('.questionTbox').value;
          //         const responseType = questionDiv.querySelector('.question-type').value;
        
          //         questionsData.push({ question: questionText, response_type: responseType });
          //     });
        
          //     // Send data to the backend (assuming an endpoint '/submit-questions')
          //     fetch('/submit-questions', {
          //         method: 'POST',
          //         headers: {
          //             'Content-Type': 'application/json'
          //         },
          //         body: JSON.stringify({ questions: questionsData })
          //     }).then(response => {
          //         if (response.ok) {
          //             alert("Questions saved successfully!");
          //         } else {
          //             alert("Error saving questions.");
          //         }
          //     }).catch(error => {
          //         console.error("Error:", error);
          //         alert("Error saving questions.");
          //     });
          // });
        });
        




    </script>
    <script>
        // add hovered class to selected list item
        let list = document.querySelectorAll(".navigation li");

        function activeLink() {
        list.forEach((item) => {
            item.classList.remove("hovered");
        });
        this.classList.add("hovered");
        }

        list.forEach((item) => item.addEventListener("mouseover", activeLink));

        // Menu Toggle
        let toggle = document.querySelector(".toggle");
        let navigation = document.querySelector(".navigation");
        let main = document.querySelector(".main");

        toggle.onclick = function () {
        navigation.classList.toggle("active");
        main.classList.toggle("active");
        }; 
    </script>

    <!-- ====== ionicons ======= -->
    <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
    <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
</body>

</html>
















<!-- <script>
document.addEventListener("DOMContentLoaded", function() {
    const newSurvey = document.querySelector('.new-survey-btn');

    // Placeholder data for active surveys
    const surveys = [
        { title: "Customer Satisfaction Survey" },
        { title: "Employee Feedback Survey" }
    ];

    // Load surveys into the table
    function loadSurveys() {
        const tbody = document.getElementById("surveys-table").querySelector("tbody");
        tbody.innerHTML = ""; // Clear existing rows
        surveys.forEach(survey => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${survey.title}</td>
                <td>
                    <button onclick="editSurvey('${survey.title}')" class="actions-btn">Edit</button>
                    <button onclick="deleteSurvey('${survey.title}')" class="actions-btn">Delete</button>
                </td>
            `;
            tbody.appendChild(row);
        });
    }

    // Call loadSurveys to display surveys on page load
    loadSurveys();

    // Placeholder functions for edit and delete actions
    function editSurvey(title) {
        alert(`Editing survey: ${title}`);
    }

    function deleteSurvey(title) {
        alert(`Deleting survey: ${title}`);
        // Implement delete logic here
    }

    // Add event listener to create new survey
    newSurvey.addEventListener('click', function() {
        const mainContainer = document.querySelector('.recentOrders');
        const titleForm = document.createElement('form');
        titleForm.className = 'survey-title';
        titleForm.setAttribute('action', "/api/survey/newsurvey");
        titleForm.setAttribute('method', "post");

        // Title Form fields for Title, Created Date, End Date, and Description
        titleForm.innerHTML = `
            <label for="input-title" id="label-one">Title :</label>
            <input type="text" name="title" id="input-title" placeholder="Title" required>
            <label for="created-date" class="label">Created Date :</label>
            <input type="date" name="created_date" id="created-date" required>
            <label for="deadline" class="label">End Date :</label>
            <input type="date" name="deadline" id="dead-line" required> <br>
            <label for="description-title" id="label-four">Description :</label>
            <input type="text" name="description" id="description" placeholder="Description" required> <br>
        `;
        
        mainContainer.appendChild(titleForm);

        // Add Question button container
        const addQuestionBtnContainer = document.createElement('div');
        addQuestionBtnContainer.className = 'addQuestion';
        addQuestionBtnContainer.innerHTML = `<button type="button" class="addQuestionBtn"> Add Question </button>`;
        titleForm.appendChild(addQuestionBtnContainer);

        // Container for all questions
        const questionsContainer = document.createElement('div');
        questionsContainer.className = 'questionsContainer';
        titleForm.appendChild(questionsContainer);

        // Event listener for adding new questions
        const addQuestionBtn = addQuestionBtnContainer.querySelector('.addQuestionBtn');
        addQuestionBtn.addEventListener('click', function() {
            const questionDiv = document.createElement('div');
            questionDiv.className = 'question';
            
            questionDiv.innerHTML = `
                <label class="questionlbl">Question:</label> <br>
                <input type="text" name="questions[]" placeholder="Add Question" class="questionTbox" required> <br><br>
                <label class="responselbl">Response Type:</label> <br>
                <select name="response_types[]" class="question-type" required>
                    <option value="open-ended">Open ended</option>
                    <option value="single-choice">Single Choice</option>
                    <option value="description">Description</option>
                </select>
            `;

            questionsContainer.appendChild(questionDiv);
        });

        // Save Survey Button
        const saveSurveyButton = document.createElement('button');
        saveSurveyButton.type = 'button';
        saveSurveyButton.textContent = 'Save Survey';
        saveSurveyButton.className = 'saveSurveyButton';
        titleForm.appendChild(saveSurveyButton);

        // Save Questions Button
        const saveQuestionsButton = document.createElement('button');
        saveQuestionsButton.type = 'button';
        saveQuestionsButton.textContent = 'Save Questions';
        saveQuestionsButton.className = 'saveQuestionsButton';
        titleForm.appendChild(saveQuestionsButton);

        // Event listener for saving the survey
        saveSurveyButton.addEventListener('click', async function() {
            const title = document.getElementById('input-title').value;
            const createdDate = document.getElementById('created-date').value;
            const deadline = document.getElementById('dead-line').value;
            const description = document.getElementById('description').value;

            const response = await fetch('/api/survey/newsurvey', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, createdDate, deadline, description })
            });

            const data = await response.json();
            alert(`Survey created with ID: ${data.surveyId}`);
            // Store survey ID for associating with questions
            titleForm.setAttribute('data-survey-id', data.surveyId);
        });

        // Event listener for saving questions
        saveQuestionsButton.addEventListener('click', async function() {
            const surveyId = titleForm.getAttribute('data-survey-id');
            if (!surveyId) {
                alert('Please save the survey first!');
                return;
            }

            const questions = [];
            questionsContainer.querySelectorAll('.question').forEach(questionDiv => {
                const questionText = questionDiv.querySelector('.questionTbox').value;
                const responseType = questionDiv.querySelector('.question-type').value;

                questions.push({
                    text: questionText,
                    response_type: responseType
                });
            });

            const response = await fetch('/api/survey/addquestions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ surveyId, questions })
            });

            const data = await response.json();
            alert(`Questions saved for Survey ID: ${surveyId}`);
        });
    });
});
</script> -->